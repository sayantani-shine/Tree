//O(m*n) solurtion
bool areIdentical(Node * root1, Node *root2)
{
    /* base cases */
    if (root1 == NULL && root2 == NULL)
        return true;
 
    if (root1 == NULL || root2 == NULL)
        return false;
 
    /* Check if the data of both roots is
    same and data of left and right
    subtrees are also same */
    return (root1->data == root2->data &&
            areIdentical(root1->left, root2->left) &&
            areIdentical(root1->right, root2->right) );
}
 
 
/* This function returns true if S
is a subtree of T, otherwise false */
bool isSubTree(Node *T, Node *S)
{
    /* base cases */
    if (S == NULL)
        return true;
 
    if (T == NULL)
        return false;
 
    /* Check the tree with root as current node */
    if (areIdentical(T, S))
        return true;
 
    /* If the tree with root as current
    node doesn't match then try left
    and right subtrees one by one */
    return isSubTree(T->left, S) ||
        isSubTree(T->right, S);
}
//O(n) solution
bool isSubTree(Node* T, Node* S) 
    {
       
       if(S==NULL)
       return true;
       if(T==NULL)
       return false;
        vector<int> inT=inorder(T);
        vector<int> inS=inorder(S);
      auto it = search(inT.begin(), inT.end(), inS.begin(), inS.end());
    if (it == inT.end()) {
        return false;
    }
    inT.erase(inT.begin(), inT.end());
    inS.erase(inS.begin(), inS.end());
        inT=preorder(T);
    inS=preorder(S);
   auto itt = search(inT.begin(), inT.end(), inS.begin(), inS.end());
    if (itt == inT.end()) {
        return false;
    }
 
    return true;
    
        
    }
